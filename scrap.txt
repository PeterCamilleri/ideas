======================================================
Command Prompt with Ruby and Rails

C:\Windows\System32\cmd.exe /E:ON /K C:\RailsInstaller\Ruby2.3.3\setup_environment.bat C:\RailsInstaller

/E:ON - enable command extensions.

/C: command - execute the command then exit the CLI.
/K: command - execute the command but do not exit the CLI.

ruby -e"require 'mysh'; Mysh.run"
ruby -e"require %q{mysh}; Mysh.run"

cmd /c cmd1 & cmd2
cmd /c cmd1 && cmd2


Connecting git Repositories
===========================

git remote add origin https://github.com/PeterCamilleri/.git
git remote add origin https://github.com/PeterCamilleri/<<<name>>>.git
git push -u origin master


Cloning git Repositories
===========================

git clone https://github.com/PeterCamilleri/Fibonacci_CPP.git
git clone https://github.com/gosu/gosu.git

Bundler for Gems
================

bundle gem my_gem_name
 -- create a skeleton for gem development.
 -- execute this command from the parent folder of the gem root folder.

Filter the list of files included in a gem. The following is in the gemspec.

  raw_list = `git ls-files`.split($/)
  raw_list = raw_list.keep_if {|entry| !entry.start_with?("docs") }
  spec.files = raw_list

======================================================

The following new tasks for the rakefile:

#!/usr/bin/env rake
# coding: utf-8
require 'rake/testtask'
require "bundler/gem_tasks"

desc "Run a scan for smelly code!"
task :reek do |t|
  `reek --no-color lib > reek.txt`
end

desc "Fire up an IRB session with <<<name>>> preloaded."
task :console do
  system "ruby irbt.rb local"
end

desc "What version of <<<name>>> is this?"
task :vers do |t|
  puts
  puts "<<<name>>> version = #{<<<name>>>::VERSION}"
end

# Alternate test.

desc "Alternative test procedure"
task :alt_test, :target do |t, args|
  args.with_defaults(:target => 'test')
  here  = File.dirname(__FILE__)
  target = "#{here}/#{args[:target]}/*.rb"
  puts "Target files = #{target}"
  puts

  block = "{|file| require file if File.basename(file) =~ /test/}"
  code  = "Dir['#{target}'].each #{block}"

  system "ruby -e\"#{code}\""
end

# Simplified alternate test.

desc "Alternative test procedure"
task :alt_test do |t|
  here  = File.dirname(__FILE__)
  target = "#{here}/test/*.rb"
  puts "Target files = #{target}"
  puts

  block = "{|file| require file if File.basename(file) =~ /test/}"
  code  = "Dir['#{target}'].each #{block}"

  system "ruby -e\"#{code}\""
end



======================================================

Common test file boilerplate.

require_relative '../lib/<<<name>>>'
gem              'minitest'
require          'minitest/autorun'
require          'minitest_visible'

class <<<name>>>Tester < Minitest::Test

  #Track mini-test progress.
  include MinitestVisible

  def test_that_it_has_a_version_number
    refute_nil(::<<<name>>>::VERSION)
    assert(::<<<name>>>::VERSION.frozen?)
    assert(::<<<name>>>::VERSION.is_a?(String))
    assert(/\A\d+\.\d+\.\d+/ =~ ::<<<name>>>::VERSION)
  end

  # More tests go here.
end

======================================================
Readme elements:

## Contributing

1. Fork it
2. Create your feature branch (`git checkout -b my-new-feature`)
3. Commit your changes (`git commit -am 'Add some feature'`)
4. Push to the branch (`git push origin my-new-feature`)
5. Create new Pull Request

OR...

* Make a suggestion by raising an
 [issue](https://github.com/PeterCamilleri/<<<name>>>/issues)
. All ideas and comments are welcome.

## License

The gem is available as open source under the terms of the
[MIT License](./LICENSE.txt).

## Code of Conduct

Everyone interacting in the <<<name>>> project’s codebases, issue trackers,
chat rooms and mailing lists is expected to follow the
[code of conduct](./CODE_OF_CONDUCT.md).


======================================================

Useful utilities:

# Line count of a project from the command line.
find lib -name '*.rb' | xargs wc -l

# Require all files in a folder.
Dir[File.dirname(__FILE__) + '/players/*.rb'].each {|file| require file }

# Display the Ruby configuration data.
RbConfig::CONFIG.keys.sort.each {|k| puts "#{k} => #{RbConfig::CONFIG[k]}"}; nil

GET - /api/v1/gems/[GEM NAME].(json|yaml)

https://rubygems.org/api/v1/downloads/minitest_visible-0.1.2.json

http://bestgems.org//api/v1/gems/full_dup/total_downloads.json


https://rubygems.org/api/v1/downloads/full_dup-0.0.5.json
https://rubygems.org/api/v1/versions/full_dup.json
https://rubygems.org/api/v1/versions/full_dup/latest.json
https://rubygems.org/api/v1/versions/gosu/latest.json   # It works!

https://rubygems.org/api/v1/gems/flex_array/reverse_dependencies.json
https://rubygems.org/api/v1/gems/mini_readline/reverse_dependencies.json
https://rubygems.org/api/v1/gems/rails/reverse_dependencies.json
https://rubygems.org/api/v1/gems/full_dup/reverse_dependencies.json
https://rubygems.org/api/v1/gems/ruby_sscanf/reverse_dependencies.json

======================================================

# Query a web based json data source.

require 'net/http'
require 'json'

url = 'https://api.spotify.com/v1/search?type=artist&q=tycho'
uri = URI(url)
response = Net::HTTP.get(uri)
JSON.parse(response)

https://en.wikipedia.org/wiki/Read-eval-print_loop
https://rubygems.org/api/v1/owners/PeterCamilleri/gems.json
https://rubygems.org/api/v1/search.json?query=fOOrth
https://rubygems.org/api/v1/search.json?query=fOOrth&page=2
https://rubygems.org/api/v1/versions/full_dup.json
https://rubygems.org/api/v1/versions/mini_readline.json

======================================================
Some miscellaneous notes:

Removed code from flex_array gem:

  # Make a copy of the other's data.
  def copy_data(other)
    fail ArgumentError, "Incompatible data copy." unless compatible?(other)
    @array_data = other.array_data.dup
  end

C:\Sites>ruby -e'puts RubyVM::InstructionSequence.compile_option'
{:inline_const_cache=>true,
 :peephole_optimization=>true,
 :tailcall_optimization=>false,
 :specialized_instruction=>true,
 :operands_unification=>true,
 :instructions_unification=>false,
 :stack_caching=>false,
 :trace_instruction=>true,
 :frozen_string_literal=>false,
 :debug_frozen_string_literal=>false,
 :debug_level=>0
}

C:\Sites>ruby -e"p RubyVM::OPTS"
["direct threaded code",
 "operands unification",
 "inline method cache"
]


Pithy sayings and profound quotes:

The Tyranny of Brittle Code

#   About erb:

#   <% Ruby code -- inline with output %>
#   <%= Ruby expression -- replace with result %>
#   <%# comment -- ignored -- useful in testing %>
#   % a line of Ruby code -- treated as <% line %> (optional -- see ERB.new)
#   %% replaced with % if first thing on a line and % processing is used
#   <%% or %%> -- replace with <% or %> respectively

98 mysh>=ERB.new("ab<%= a -%>\n efg", nil, '-').result(binding)
"ab42 efg"

ruby --enable=frozen-string-literal  test\mini_erb_test.rb

## License

The gem is available as open source under the terms of the
[MIT License](./LICENSE.txt).

## Code of Conduct

Everyone interacting in the fully_freeze project’s codebases, issue trackers,
chat rooms and mailing lists is expected to follow the
[code of conduct](./CODE_OF_CONDUCT.md).


Saving Windows 7

Regedit.exe
HKEY_CURRENT_USER\Software\Classes\Local Settings\Software\Microsoft\Windows\Shell\Bags\AllFolders\Shell

New -> String Value "FolderType " -> Data "NotSpecified"

Amazing video on virtual machine design for the 6502

https://youtu.be/zdJnz6-d060
https://github.com/AcheronVM/acheronvm

* Utility macros to round out some of the rough edges, especially when dealing
with 16 bit data variables and pointers.
* Useful routines of a larger sort. Ideas include stack emulation, bank
management, heap management, and "drivers" for custom add on devices.
* The design of threaded interpreter languages (TIL) for the W65C02S. While
normally associated with the FORTH language, TILs are a powerful technique that
may be used to implement almost any language. The Great Grand Daddy of this is
the Sweet-16 virtual machine written by Steve Wozniak and described in Byte
magazine issue of
[**November 1977**](https://archive.org/details/byte-magazine-1977-11).

ca65 --list-bytes 0 -l SW16/sweet_16.lst SW16/sweet_16.a65
ca65 -D sw16_sim_support --list-bytes 0 -l SW16/sweet_16.lst SW16/sweet_16.a65

ca65                     SW16/sweet_16.a65
ca65 -D sw16_sim_support SW16/sweet_16.a65


test65 -l -v t65/t65_sweet_16.a65

AZ Shopping List

Crumpets, Plum Sauce, Mars Bars, Smarties, Aero Bars, Coffee Crisp,
Montreal-Style Bagels, Yorkie, Mackintosh "MACK" Toffee, Sweet Marie
Butter Tarts,

Bring back

White Zinfandel Wine, Colorful fountain pens

Gypsy
Sherlock Holmes and The Raven's Curse
Charley's Aunt
Prince Caspian
Me and My Girl

I have a buyer but will keep you in mind in case they bail.
No matter, I have a new buyer
Sorry about all the churn. If you have a truck, you can have this!

10 Bassett Blvd, Unit 65, Whitby

https://archive.org/search.php?query=The+Computer+Journal&page=1
